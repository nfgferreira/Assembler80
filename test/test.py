import subprocess as sp
import sys
import os

a80_directory: str = ""
source_directory: str = ""

def assembly(include_path: str = "",
             output_file: str = "",
             create_sym_table: bool = False,
             symbol_table_file: str = "",
             use_pre_compiled_header: bool = False,
             cpu: str = "8085"):
    out = sp.run()
    
def test_all_8085_instructions():
    print("\n*** Testing all 8085 instuctions.")

    a80_path = a80_directory + "/a80"
    source_path = source_directory + "/all8085.asm"

    rel_file = os.path.basename(source_path)
    rel_file,_ = os.path.splitext(rel_file)
    rel_file = rel_file + ".rel"
    if (os.path.exists(rel_file)):
        os.remove(rel_file)
    
    print ("\n   Calling {0} -8085 {1}\n".format(a80_path, source_path))
    out=sp.run([a80_path, "-8085", source_path], stdout=sp.PIPE, stderr=sp.STDOUT)

    decoded_lines = out.stdout.decode('utf-8').splitlines()
    for line in decoded_lines:
        print("   " + line)

    if (out.returncode != 0):
        print("   Returned {0}, 0 expected.".format(out.returncode))
        return False

    l80_path = l80_directory + "/l80"
    print ("   Calling {0} all8085.hex {1}\n".format(l80_path, rel_file))
    out=sp.run([l80_path, "all8085.hex", rel_file], stdout=sp.PIPE, stderr=sp.STDOUT)

    if (out.returncode != 0):
        print("   Returned {0}, 0 expected.".format(out.returncode))
        return False

    # Now we compare the file built by l80 with the expected
    expected = [0xc3, 0x32, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x35, 0x00, 0x01, 
                0x00, 0x02, 0x00, 0x01, 0x22, 0x0c, 0x02, 0x03, 0x04, 0x05, 0x06, 0xfe, 0x07, 0x09, 0x0a, 0x0b,
                0x0c, 0x0d, 0x0e, 0xfe, 0x0f, 0x11, 0x34, 0x22, 0x12, 0x13, 0x14, 0x15, 0x16, 0x12, 0x17, 0x19,
                0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x34, 0x1f, 0x20, 0x21, 0x2f, 0x00, 0x22, 0x31, 0x00, 0x23, 0x24,
                0x25, 0x26, 0x22, 0x27, 0x29, 0x2a, 0x57, 0x00, 0x2b, 0x2c, 0x2d, 0x2e, 0x22, 0x2f, 0x30, 0x31,
                0x02, 0x30, 0x32, 0x31, 0x00, 0x33, 0x34, 0x35, 0x36, 0xd8, 0x37, 0x39, 0x3a, 0x31, 0x00, 0x3b,
                0x3c, 0x3d, 0x3e, 0xd9, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
                0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
                0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
                0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a,
                0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a,
                0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a,
                0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
                0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0x05, 0x01, 0xc3, 0x05, 0x01, 0xc4, 0xf5, 0x00,
                0xc5, 0xc6, 0x4e, 0xc7, 0xc8, 0xc9, 0xca, 0x13, 0x01, 0xcc, 0xf5, 0x00, 0xc3, 0xf9, 0x00, 0xce,
                0x59, 0xcf, 0xd0, 0xd1, 0xd2, 0x05, 0x01, 0xd3, 0x22, 0xd4, 0xf9, 0x00, 0xd5, 0xd6, 0x38, 0xd7,
                0xd8, 0xda, 0x13, 0x01, 0xdb, 0x5a, 0xdc, 0xf5, 0x00, 0xde, 0x9a, 0xdf, 0xe0, 0xe1, 0xe2, 0x89,
                0x67, 0xe3, 0xe4, 0xbc, 0x9a, 0xe5, 0xe6, 0x5a, 0xe7, 0xe8, 0xe9, 0xea, 0xcd, 0xab, 0xeb, 0xec,
                0xd2, 0x04, 0xee, 0x22, 0xef, 0xf0, 0xf1, 0xf2, 0xe1, 0x10, 0xf3, 0xf4, 0x2f, 0x16, 0xf5, 0xf6,
                0x0a, 0xf7, 0xf8, 0xf9, 0xfa, 0x81, 0x23, 0xfb, 0xfc, 0x95, 0x1f, 0xfe, 0x5a, 0xff
    ]

    
    return True
        
def test_no_sim_rim_in_8080():
    print("\n*** Testing we do not have RIM and SIM in 8080.")

    a80_path = a80_directory + "/a80"
    source_path = source_directory + "/all8085.asm"
    
    print ("   Calling {0} -8080 {1}\n".format(a80_path, source_path))
    out=sp.run([a80_path, "-8080", source_path], stdout=sp.PIPE, stderr=sp.STDOUT)

    decoded_lines = out.stdout.decode('utf-8').splitlines()
    for line in decoded_lines:
        print("   " + line)

    if (out.returncode != 1):
        print("   Returned {0}, 1 expected.".format(out.returncode))
        return False

    return True

def run_tests() -> int:
    count: int = 0    # Number of errors

    if not test_no_sim_rim_in_8080():
        count = count + 1
    if not test_all_8085_instructions():
        count = count + 1
    return count

def main(parameters: list[str]) -> None:
    if len(parameters) < 4:
        print("1st parameter: directory where the a80 executable is.")
        print("2nd parameter: directory where the l80 executable is.")
        print("3rd parameter: path for directory with source files to be tested.")
        exit(1)

    global a80_directory, l80_directory, source_directory
    a80_directory = parameters[1]
    l80_directory = parameters[2]
    source_directory = parameters[3]

    count : int = run_tests()
    print("\n>>> Tests finished with {0} error(s)".format(count))

if __name__ == "__main__":
    main(sys.argv)
